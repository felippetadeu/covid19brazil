{"version":3,"sources":["services/brasilIOServices.js","services/ibgeServices.js","pages/Home/index.jsx","App.jsx","features/counter/counterSlice.js","app/store.js","index.js"],"names":["getCOVIDInfo","state","city","a","axios","get","getUfs","getMunicipios","uf","Home","useState","setCity","setUf","results","setResults","loading","setLoading","data","setData","ufs","setUfs","municipios","setMunicipios","response","status","sort","b","sigla","map","r","id","text","nome","useEffect","getListaUF","getListaMunicipio","date","moment","Date","format","handleCOVIDClick","className","value","onChange","e","target","u","onClick","title","columns","name","selector","progressPending","dense","highlightOnHover","pagination","locale","App","counterSlice","createSlice","initialState","reducers","increment","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.15cb335f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const getCOVIDInfo = async (state, city) => {\r\n  return await axios.get(`https://brasil.io/api/dataset/covid19/caso/data/?state=${state}&city=${city}`)\r\n};","import axios from 'axios'\r\n\r\nexport const getUfs = async () => {\r\n  return await axios.get('https://servicodados.ibge.gov.br/api/v1/localidades/estados')\r\n}\r\n\r\nexport const getMunicipios = async (uf) => {\r\n  return await axios.get(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${uf}/municipios`)\r\n}","import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport ptBr from 'moment/locale/pt-br'\r\nimport DataTable from 'react-data-table-component'\r\nimport { getCOVIDInfo } from '../../services/brasilIOServices'\r\nimport { getUfs, getMunicipios } from '../../services/ibgeServices'\r\n\r\nmoment.locale('pt-Br')\r\nexport default function Home() {\r\n\r\n  const [city, setCity] = useState('')\r\n  const [uf, setUf] = useState('')\r\n  const [results, setResults] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const columns = [\r\n    {name: 'Cidade', selector: 'city'},\r\n    {name: 'Data', selector: 'date'},\r\n    {name: 'Confirmados', selector: 'confirmed'},\r\n    {name: 'Mortes', selector: 'deaths'},\r\n    {name: 'UF', selector: 'state'},\r\n  ]\r\n  const [data, setData] = useState([])\r\n  const [ufs, setUfs] = useState([])\r\n  const [municipios, setMunicipios] = useState([])\r\n\r\n  async function getListaUF() {\r\n    const response = await getUfs()\r\n    if (response.status === 200){\r\n      setUfs(response.data.sort(function (a, b){\r\n        if (a.sigla < b.sigla) return -1;\r\n        if (a.sigla > b.sigla) return 1;\r\n        return 0;\r\n      }).map(r => {\r\n        return {\r\n          id: r.sigla,\r\n          text: r.sigla\r\n        }\r\n      }))\r\n    }\r\n  }\r\n\r\n  async function getListaMunicipio(uf){\r\n    const response = await getMunicipios(uf)\r\n    if (response.status === 200){\r\n      setMunicipios(response.data.sort(function (a, b){\r\n        if (a.nome < b.nome) return -1;\r\n        if (a.nome > b.nome) return 1;\r\n        return 0;\r\n      }).map(r => {\r\n        return {\r\n          id: r.nome,\r\n          text: r.nome\r\n        }\r\n      }))\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getListaUF() \r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (uf)\r\n      getListaMunicipio(uf)\r\n  }, [uf])\r\n\r\n  useEffect(() => {\r\n    results.map(r => {\r\n      r.date = moment(new Date(r.date + \"T00:00:00\")).format('DD/MM/YYYY - dddd')\r\n      return r\r\n    })\r\n    setData(results)\r\n  }, [results])\r\n\r\n  const handleCOVIDClick = async () => {\r\n    const response = await getCOVIDInfo(uf, city)\r\n    setLoading(true)\r\n    if (response.status === 200){\r\n      setResults(response.data.results)\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <div>\r\n        \r\n        <select value={uf} onChange={(e) => setUf(e.target.value)}>\r\n          {ufs.map((u => {\r\n            return <option value={u.id}>{u.text}</option>\r\n          }))}\r\n        </select>\r\n        <select value={city} onChange={(e) => setCity(e.target.value)}>\r\n          {municipios.map((u => {\r\n            return <option value={u.id}>{u.text}</option>\r\n          }))}\r\n        </select>\r\n        \r\n        <button onClick={handleCOVIDClick}>COVID</button>\r\n      </div>\r\n      <div className=\"\">\r\n        <DataTable \r\n          title=\"CASOS COVID-19\"\r\n          columns={columns}\r\n          data={data}\r\n          progressPending={loading}\r\n          dense={true}\r\n          highlightOnHover={true}\r\n          pagination={true}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Home from './pages/Home'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}